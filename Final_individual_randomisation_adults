#####Packages required#####
library(ape)
library(asnipe)
library(igraph)
library(vegan)
library(effsize)
library(ggplot2)
library(data.table)
library(adehabitatHR)

rm(list=ls())
ls()

save.image("/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/R_workspaces/Revised_analysis_20210524.RData")

setwd("/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions")
load("/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/R_workspaces/Revised_analysis_20210520.Rdata")

head(Sonso)
Sonso_Adult<-subset(Sonso, select=c("FK", "HW", "KT", "MS", "PS", "SM", "ZL"))
head(Sonso_Adult)
#create network object
networkS_ad<-get_network(association_data=Sonso_Adult, data_format="GBI")

#build adjacency graph for simple ratio network
netS_ad<-graph.adjacency(networkS_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
permutations<-10000 #use 1000 permutations
randomS_ad <- network_permutation(Sonso_Adult, association_matrix=networkS_ad, permutations=permutations)


#calculate mean weight in random networks
randomES_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_ad[i] <- mean(edges$weight)} 

mean(randomES_ad)

#create network with only above random edges
Scut.off_ad<-mean(randomES_ad)
dil_netS_ad <- delete_edges(netS_ad, E(netS_ad)[weight<Scut.off_ad])
plot(dil_netS_ad,edge.width= E(netS_ad)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
     
#calculate network measures Sonso, check if they are different from random networks
#transitivity 
obsSt_ad<-transitivity(netS_ad)

	#create object that holds results for all the random networks
random.St_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.St_ad[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.St_ad, breaks=1,col="grey", main = "Sonso", xlab = "Transitivity")
abline(v=obsSt_ad, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.St_ad >= obsSt_ad)/10000
sum(random.St_ad <= obsSt_ad)/10000

#mean strength 
obsSstr_ad<-mean(strength(netS_ad))
range(strength(netS_ad))
mean(strength(netS_ad))
sd(strength(netS_ad))

	#create object that holds results for all the random networks
random.Sstr_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Sstr_ad[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.Sstr_ad, breaks=50,col="grey", main = "Sonso", xlab = "Mean Strength")
abline(v=obsSstr_ad, col="red")

	#compare results from random and observed networks
sum(random.Sstr_ad >= obsSstr_ad)/10000
sum(random.Sstr_ad <= obsSstr_ad)/10000

#modularity 
clusS_ad<- cluster_louvain(netS_ad) #calculate clusterng algorithm (Louavain's)
obsmodS_ad<-modularity(clusS_ad) #calculate modularity

	#create object that holds results for all the random networks
random.modS_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomS_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modS_ad[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modS_ad, breaks=50,col="grey", main = "Sonso", xlab = "Modularity")
abline(v=obsmodS_ad, col="red")

	#compare results from random and observed networks
sum(random.modS_ad >= obsmodS_ad)/10000
sum(random.modS_ad <= obsmodS_ad)/10000   

#Waibira measures 
Waibira_Adult<-subset(Waibira, select=c("ABO", "ALF", "BEN", "CHN", "DOU", "GER","ILA", "KAS", "KEV", "MAC", "MOR", "SAM", "TAL", "TRS", "URS"))

#create network object
networkW_ad<- get_network(association_data=Waibira_Adult, data_format="GBI")

#build adjacency graph for simple ratio network
netW_ad<-graph.adjacency(networkW_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_ad <- network_permutation(Waibira_Adult, association_matrix=networkW_ad, permutations=permutations)

#calculate mean random edge weight 
randomEW_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_ad[i] <- mean(edges$weight)} 

mean(randomEW_ad)

#create above chance edges network
Wcut.off_ad<-mean(randomEW_ad)
dil_netW_ad <- delete_edges(netW_ad, E(netW_ad)[weight<Wcut.off_ad])
plot(dil_netW_ad,edge.width= E(netW_ad)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
     
#calculate network measures
#transitivity 
obsWt_ad<-transitivity(netW_ad)

	#create object that holds results for all the random networks
random.Wt_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Wt_ad[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.Wt_ad, breaks=1,col="grey", main = "Waibira", xlab = "Transitivity")
abline(v=obsWt_ad, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.Wt_ad >= obsWt_ad)/10000
sum(random.Wt_ad <= obsWt_ad)/10000

#mean strength 
obsWstr_ad<-mean(strength(netW_ad))
range(strength(netW_ad))
sd(strength(netW_ad))

	#create object that holds results for all the random networks
random.Wstr_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.Wstr_ad[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.Wstr_ad, breaks=50,col="grey", main = "Waibira", xlab = "Mean Strength")
abline(v=obsWstr_ad, col="red")

	#compare results from random and observed networks
sum(random.Wstr_ad >= obsWstr_ad)/10000
sum(random.Wstr_ad <= obsWstr_ad)/10000

#modularity 
clusW_ad<- cluster_louvain(netW_ad) #calculate clusterng algorithm (Louavain's)
obsmodW_ad<-modularity(clusW_ad) #calculate modularity

	#create object that holds results for all the random networks
random.modW_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modW_ad[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modW_ad, breaks=50,col="grey", main = "Waibira", xlab = "Modularity")
abline(v=obsmodW_ad, col="red")

	#compare results from random and observed networks
sum(random.modW_ad >= obsmodW_ad)/10000
sum(random.modW_ad <= obsmodW_ad)/10000

dev.copy2pdf(file= "/Users/gb64/Desktop/Flexibility in Chimpanzee Social Network/BEH_revisions/Figures/SuppFigS7_20210525.pdf")
#create Waibira_A network
Waibira_A_ad<-subset(Waibira, select=c("ALF", "BEN", "DOU", "GER", "ILA", "MAC", "SAM", "TAL", "TRS"))

#create network object
networkWA_ad<- get_network(association_data=Waibira_A_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netWA_ad<-graph.adjacency(networkWA_ad, mode="undirected", weighted=TRUE, diag=FALSE)


#create random networks through data stream permutation
randomWA_ad <- network_permutation(Waibira_A_ad, association_matrix=networkWA_ad, permutations=permutations)

#calculate mean random edge weight 
randomEWA_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEWA_ad[i] <- mean(edges$weight)} 

mean(randomEWA_ad)

#create above chance edges network
WAcut.off_ad<-mean(randomEWA_ad)
dil_netWA_ad <- delete_edges(netWA_ad, E(netWA_ad)[weight<WAcut.off_ad])
plot(dil_netWA_ad,edge.width= E(netWA_ad)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 
     
#calculate network measures
#transitivity 
obsWAt_ad<-transitivity(netWA_ad)

	#create object that holds results for all the random networks
random.WAt_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WAt_ad[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.WAt_ad, breaks=1,col="grey", main = "Waibira_A", xlab = "Transitivity")
abline(v=obsWAt_ad, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.WAt_ad >= obsWAt_ad)/10000
sum(random.WAt_ad <= obsWAt_ad)/10000

#mean strength 
obsWAstr_ad<-mean(strength(netWA_ad))

	#create object that holds results for all the random networks
random.WAstr_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WAstr_ad[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.WAstr_ad, breaks=50,col="grey", main = "Waibira_A", xlab = "Mean Strength")
abline(v=obsWAstr_ad, col="red")

	#compare results from random and observed networks
sum(random.WAstr_ad >= obsWAstr_ad)/10000
sum(random.WAstr_ad <= obsWAstr_ad)/10000

#modularity 
clusWA_ad<- cluster_louvain(netWA_ad) #calculate clusterng algorithm (Louavain's)
obsmodWA_ad<-modularity(clusWA_ad) #calculate modularity

	#create object that holds results for all the random networks
random.modWA_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWA_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modWA_ad[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modWA_ad, breaks=50,col="grey", main = "Waibira_A", xlab = "Modularity")
abline(v=obsmodWA_ad, col="red")

	#compare results from random and observed networks
sum(random.modWA_ad >= obsmodWA_ad)/10000
sum(random.modWA_ad <= obsmodWA_ad)/10000

#create Waibira_B network
Waibira_B_ad<-subset(Waibira_Adult, select=c("ABO", "CHN", "KAS", "KEV", "MOR", "URS"))

#create network object
networkWB_ad<- get_network(association_data=Waibira_B_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netWB_ad<-graph.adjacency(networkWB_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomWB_ad <- network_permutation(Waibira_B_ad, association_matrix=networkWB_ad, permutations=permutations)

#calculate mean random edge weight 
randomEWB_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEWB_ad[i] <- mean(edges$weight)} 

mean(randomEWB_ad)

#create above chance edges network
WBcut.off_ad<-mean(randomEWB_ad)
#choose Waibira full mean randomE so that we keep unconnected nodes unconnected (only one dyad within Waibira B are connected in the full Waibira network)
dil_netWB_ad <- delete_edges(netWB_ad, E(netWB_ad)[weight<Wcut.off_ad])
plot(dil_netWB_ad,edge.width= E(netWB_ad)$weight*5,
     vertex.size=10,
     vertex.label.cex=0.5) 

#calculate network measures
#transitivity 
obsWBt_ad<-transitivity(netWB_ad)

	#create object that holds results for all the random networks
random.WBt_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WBt_ad[i] <- transitivity(net.r)} 
  
  #plot histogram of results from random networks with observed result in as red line
hist(random.WBt_ad, breaks=1,col="grey", main = "Waibira_B", xlab = "Transitivity")
abline(v=obsWBt_ad, col="red")#add line for observed measure

	#compare results from random and observed networks
sum(random.WBt_ad >= obsWBt_ad)/10000
sum(random.WBt_ad <= obsWBt_ad)/10000

#mean strength 
obsWBstr_ad<-mean(strength(netWB_ad))

	#create object that holds results for all the random networks
random.WBstr_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  random.WBstr_ad[i] <- mean(strength(net.r))} 
  
	 #plot histogram of results from random networks with observed result in as red line
hist(random.WBstr_ad, breaks=50,col="grey", main = "Waibira_B", xlab = "Mean Strength")
abline(v=obsWBstr_ad, col="red")

	#compare results from random and observed networks
sum(random.WBstr_ad >= obsWBstr_ad)/10000
sum(random.WBstr_ad <= obsWBstr_ad)/10000

#modularity 
clusWB_ad<- cluster_louvain(netWB_ad) #calculate clusterng algorithm (Louavain's)
obsmodWB_ad<-modularity(clusWB_ad) #calculate modularity

	#create object that holds results for all the random networks
random.modWB_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomWB_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  clus<- cluster_louvain(net.r)
  random.modWB_ad[i] <- modularity(clus)} 
  
	#plot histogram of results from random networks with observed result in as red line
hist(random.modWB_ad, breaks=50,col="grey", main = "Waibira_B", xlab = "Modularity")
abline(v=obsmodWB_ad, col="red")

	#compare results from random and observed networks
sum(random.modWB_ad >= obsmodWB_ad)/10000
sum(random.modWB_ad <= obsmodWB_ad)/10000

#distance between graphs
setwd("/Users/gb64/Desktop/")
write_graph(dil_netS_ad, "/Users/gb64/Desktop/elS_ad.txt")
write_graph(dil_netW_ad, "/Users/gb64/Desktop/elW_ad.txt")
write_graph(dil_netWA_ad, "/Users/gb64/Desktop/elWA_ad.txt")
write_graph(dil_netWB_ad, "/Users/gb64/Desktop/elWB_ad.txt")


D_full_ad<-D("elS_ad.txt","elW_ad.txt",0.45,0.45,0.1)
D_S_WA_ad<-D("elS_ad.txt","elWA_ad.txt",0.45,0.45,0.1)
D_S_WB_ad<-D("elS_ad.txt","elWB_ad.txt",0.45,0.45,0.1)

#year by year comparison 
#upload attributes for each individual
Sattributes_ad<-read.csv(file.choose(),header = TRUE)

#upload gbi data for Sonso
sgbi_15_ad<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi_15_ad<-as.matrix(sgbi_15_ad)
Sonso_15_ad<-t(sgbi_15_ad)
head(Sonso_15_ad)

#define columns of gbi data by indiviual ID
colnames(Sonso_15_ad)<-Sattributes_ad$ID

#create network object
networkS_15_ad<-get_network(association_data=Sonso_15_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netS_15_ad<-graph.adjacency(networkS_15_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_15_ad <- network_permutation(Sonso_15_ad, association_matrix=networkS_15_ad, permutations=permutations)


#calculate mean weight in random networks
randomES_15_ad<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS_15_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_15_ad[i] <- mean(edges$weight)} 

mean(randomES_15_ad)

#create network with only above random edges
Scut.off_15_ad<-mean(randomES_15_ad)
dil_netS_15_ad <- delete_edges(netS_15_ad, E(netS_15_ad)[weight<Scut.off_15_ad])
plot(dil_netS_15_ad)
write_graph(dil_netS_15_ad, "/Users/gb64/Desktop/elS_15_ad.txt")

#upload gbi data for Sonso
sgbi_16_ad<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi_16_ad<-as.matrix(sgbi_16_ad)
Sonso_16_ad<-t(sgbi_16_ad)

#define columns of gbi data by indiviual ID
colnames(Sonso_16_ad)<-Sattributes_ad$ID

#create network object
networkS_16_ad<-get_network(association_data=Sonso_16_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netS_16_ad<-graph.adjacency(networkS_16_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_16_ad <- network_permutation(Sonso_16_ad, association_matrix=networkS_16_ad, permutations=permutations)


#calculate mean weight in random networks
randomES_16_ad<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS_16_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_16_ad[i] <- mean(edges$weight)} 

mean(randomES_16_ad)

#create network with only above random edges
Scut.off_16_ad<-mean(randomES_16_ad)
dil_netS_16_ad <- delete_edges(netS_16_ad, E(netS_16_ad)[weight<Scut.off_16_ad])
plot(dil_netS_16_ad)
write_graph(dil_netS_16_ad, "/Users/gb64/Desktop/elS_16_ad.txt")

#upload gbi data for Sonso
sgbi_17_ad<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi_17_ad<-as.matrix(sgbi_17_ad)
Sonso_17_ad<-t(sgbi_17_ad)

#define columns of gbi data by indiviual ID
colnames(Sonso_17_ad)<-Sattributes_ad$ID

#create network object
networkS_17_ad<-get_network(association_data=Sonso_17_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netS_17_ad<-graph.adjacency(networkS_17_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_17_ad <- network_permutation(Sonso_17_ad, association_matrix=networkS_17_ad, permutations=permutations)


#calculate mean weight in random networks
randomES_17_ad<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS_17_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_17_ad[i] <- mean(edges$weight)} 

mean(randomES_17_ad)

#create network with only above random edges
Scut.off_17_ad<-mean(randomES_17_ad)
dil_netS_17_ad <- delete_edges(netS_17_ad, E(netS_17_ad)[weight<Scut.off_17_ad])
plot(dil_netS_17_ad)
write_graph(dil_netS_17_ad, "/Users/gb64/Desktop/elS_17_ad.txt")

#upload gbi data for Sonso
sgbi_18_ad<-as.matrix(read.csv(file.choose(),header=FALSE))
sgbi_18_ad<-as.matrix(sgbi_18_ad)
Sonso_18_ad<-t(sgbi_18_ad)

#define columns of gbi data by indiviual ID
colnames(Sonso_18_ad)<-Sattributes_ad$ID

#create network object
networkS_18_ad<-get_network(association_data=Sonso_18_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netS_18_ad<-graph.adjacency(networkS_18_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomS_18_ad <- network_permutation(Sonso_18_ad, association_matrix=networkS_18_ad, permutations=permutations)


#calculate mean weight in random networks
randomES_18_ad<-rep(NA, 1000)
for (i in 1:1000){
  net.r<-graph.adjacency(randomS_18_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomES_18_ad[i] <- mean(edges$weight)} 

mean(randomES_18_ad)

#create network with only above random edges
Scut.off_18_ad<-mean(randomES_18_ad)
dil_netS_18_ad <- delete_edges(netS_18_ad, E(netS_18_ad)[weight<Scut.off_18_ad])
plot(dil_netS_18_ad)
write_graph(dil_netS_18_ad, "/Users/gb64/Desktop/elS_18_ad.txt")

#Year by year comparison
D_S15_S16_ad<-D("elS_15_ad.txt","elS_16_ad.txt",0.45,0.45,0.1)
D_S15_S17_ad<-D("elS_15_ad.txt","elS_17_ad.txt",0.45,0.45,0.1)
D_S15_S18_ad<-D("elS_15_ad.txt","elS_18_ad.txt",0.45,0.45,0.1)
D_S16_S17_ad<-D("elS_16_ad.txt","elS_17_ad.txt",0.45,0.45,0.1)
D_S16_S18_ad<-D("elS_16_ad.txt","elS_18_ad.txt",0.45,0.45,0.1)
D_S17_S18_ad<-D("elS_17_ad.txt","elS_18_ad.txt",0.45,0.45,0.1)

#year by year comparison Waibira
#upload attributes for each individual
Wattributes_ad<-read.csv(file.choose(),header = TRUE)
#upload gbi data for Sonso
wgbi_15_ad<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi_15_ad<-as.matrix(wgbi_15_ad)
Waibira_15_ad<-t(wgbi_15_ad)


#define columns of gbi data by indiviual ID
colnames(Waibira_15_ad)<-Wattributes_ad$ID

#create network object
networkW_15_ad<-get_network(association_data=Waibira_15_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netW_15_ad<-graph.adjacency(networkW_15_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_15_ad <- network_permutation(Waibira_15_ad, association_matrix=networkW_15_ad, permutations=permutations)


#calculate mean weight in random networks
randomEW_15_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_15_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_15_ad[i] <- mean(edges$weight)} 

mean(randomEW_15_ad)

#create network with only above random edges
Wcut.off_15_ad<-mean(randomEW_15_ad)
dil_netW_15_ad <- delete_edges(netW_15_ad, E(netW_15_ad)[weight<Wcut.off_15_ad])
plot(dil_netW_15_ad)
write_graph(dil_netW_15_ad, "/Users/gb64/Desktop/elW_15_ad.txt")

#upload gbi data for Sonso
wgbi_16_ad<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi_16_ad<-as.matrix(wgbi_16_ad)
Waibira_16_ad<-t(wgbi_16_ad)

#define columns of gbi data by indiviual ID
colnames(Waibira_16_ad)<-Wattributes_ad$ID

#create network object
networkW_16_ad<-get_network(association_data=Waibira_16_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netW_16_ad<-graph.adjacency(networkW_16_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_16_ad <- network_permutation(Waibira_16_ad, association_matrix=networkW_16_ad, permutations=permutations)


#calculate mean weight in random networks
randomEW_16_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_16_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_16_ad[i] <- mean(edges$weight)} 

mean(randomEW_16_ad)

#create network with only above random edges
Wcut.off_16_ad<-mean(randomEW_16_ad)
dil_netW_16_ad <- delete_edges(netW_16_ad, E(netW_16_ad)[weight<Wcut.off_16_ad])
plot(dil_netW_16_ad)
write_graph(dil_netW_16_ad, "/Users/gb64/Desktop/elW_16_ad.txt")

#upload gbi data for Sonso
wgbi_17_ad<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi_17_ad<-as.matrix(wgbi_17_ad)
Waibira_17_ad<-t(wgbi_17_ad)

#define columns of gbi data by indiviual ID
colnames(Waibira_17_ad)<-Wattributes_ad$ID

#create network object
networkW_17_ad<-get_network(association_data=Waibira_17_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netW_17_ad<-graph.adjacency(networkW_17_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_17_ad <- network_permutation(Waibira_17_ad, association_matrix=networkW_17_ad, permutations=permutations)


#calculate mean weight in random networks
randomEW_17_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_17_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_17_ad[i] <- mean(edges$weight)} 

mean(randomEW_17_ad)

#create network with only above random edges
Wcut.off_17_ad<-mean(randomEW_17_ad)
dil_netW_17_ad <- delete_edges(netW_17_ad, E(netW_17_ad)[weight<Wcut.off_17_ad])
plot(dil_netW_17_ad)
write_graph(dil_netW_17_ad, "/Users/gb64/Desktop/elW_17_ad.txt")

#upload gbi data for Sonso
wgbi_18_ad<-as.matrix(read.csv(file.choose(),header=FALSE))
wgbi_18_ad<-as.matrix(wgbi_18_ad)
Waibira_18_ad<-t(wgbi_18_ad)

#define columns of gbi data by indiviual ID
colnames(Waibira_18_ad)<-Wattributes_ad$ID

#create network object
networkW_18_ad<-get_network(association_data=Waibira_18_ad, data_format="GBI")

#build adjacency graph for simple ratio network
netW_18_ad<-graph.adjacency(networkW_18_ad, mode="undirected", weighted=TRUE, diag=FALSE)

#create random networks through data stream permutation
randomW_18_ad <- network_permutation(Waibira_18_ad, association_matrix=networkW_18_ad, permutations=permutations)


#calculate mean weight in random networks
randomEW_18_ad<-rep(NA, 10000)
for (i in 1:10000){
  net.r<-graph.adjacency(randomW_18_ad[i,,], mode="undirected", weighted=TRUE, diag=FALSE)
  edges<-get.data.frame(net.r)
  randomEW_18_ad[i] <- mean(edges$weight)} 

mean(randomEW_18_ad)

#create network with only above random edges
Wcut.off_18_ad<-mean(randomEW_18_ad)
dil_netW_18_ad <- delete_edges(netW_18_ad, E(netW_18_ad)[weight<Wcut.off_18_ad])
plot(dil_netW_18_ad)
write_graph(dil_netW_18_ad, "/Users/gb64/Desktop/elW_18_ad.txt")

#Year by year comparison
D_W15_W16_ad<-D("elW_15_ad.txt","elW_16_ad.txt",0.45,0.45,0.1)
D_W15_W17_ad<-D("elW_15_ad.txt","elW_17_ad.txt",0.45,0.45,0.1)
D_W15_W18_ad<-D("elW_15_ad.txt","elW_18_ad.txt",0.45,0.45,0.1)
D_W16_W17_ad<-D("elW_16_ad.txt","elW_17_ad.txt",0.45,0.45,0.1)
D_W16_W18_ad<-D("elW_16_ad.txt","elW_18_ad.txt",0.45,0.45,0.1)
D_W17_W18_ad<-D("elW_17_ad.txt","elW_18_ad.txt",0.45,0.45,0.1)

